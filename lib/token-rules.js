var tokenRules = {
    "while":                        /while/,
    "volatile":                     /volatile/,
    "void":                         /void/,
    "unsigned":                     /unsigned/,
    "union":                        /union/,
    "typedef":                      /typedef/,
    "switch":                       /switch/,
    "struct":                       /struct/,
    "static":                       /static/,
    "sizeof":                       /sizeof/,
    "signed":                       /signed/,
    "short":                        /short/,
    "return":                       /return/,
    "register":                     /register/,
    "long":                         /long/,
    "int":                          /int/,
    "if":                           /if/,
    "goto":                         /goto/,
    "for":                          /for/,
    "float":                        /float/,
    "extern":                       /extern/,
    "enum":                         /enum/,
    "else":                         /else/,
    "double":                       /double/,
    "do":                           /do/,
    "default":                      /default/,
    "continue":                     /continue/,
    "const":                        /const/,
    "char":                         /char/,
    "case":                         /case/,
    "break":                        /break/,
    "auto":                         /auto/,
    "identifier":                   /[A-Za-z_]\w*/,
    "hexadecimal":                  /0[xX][a-fA-F0-9]+(u|U|l|L)?/,
    "octal":                        /0[0-7]+(u|U|l|L)?/,
    "decimal":                      /[0-9]+(u|U|l|L)?/,
    "char_literal":                 /\'(\\.|[^\\'])\'/,
    "floatWithoutPoint":            /[0-9]+([Ee][+-]?[0-9]+)(f|F|l|L)?/,
    "floatWithNothingBeforePoint":  /[0-9]*\.[0-9]+([Ee][+-]?[0-9]+)?(f|F|l|L)?/,
    "floatWithNothingAfterPoint":   /[0-9]+\.[0-9]*([Ee][+-]?[0-9]+)?(f|F|l|L)?/,
    "string_literal":               /\"(\\.|[^\\"])*\"/,
    "ellipsis":                     /\.\.\./,
    "right_assign":                 />>=/,
    "left_assign":                  /<<=/,
    "add_assign":                   /\+=/,
    "sub_assign":                   /\-=/,
    "mul_assign":                   /\*=/,
    "div_assign":                   /\/=/,
    "mod_assign":                   /%=/,
    "and_assign":                   /&=/,
    "xor_assign":                   /\^=/,
    "or_assign":                    /\|=/,
    "right_op":                     />>/,
    "left_op":                      /<</,
    "inc_op":                       /\+\+/,
    "dec_op":                       /\-\-/,
    "ptr_op":                       /\->/,
    "and_op":                       /&&/,
    "or_op":                        /\|\|/,
    "le_op":                        /<=/,
    "ge_op":                        />=/,
    "eq_op":                        /==/,
    "ne_op":                        /!=/,
    ";":                            /;/,
    "{":                            /{|<%/,
    "}":                            /}|%>/,
    ",":                            /,/,
    ":":                            /:/,
    "=":                            /=/,
    "(":                            /\(/,
    ")":                            /\)/,
    "[":                            /\[|<:/,
    "]":                            /\]|:>/,
    ".":                            /\./,
    "&":                            /&/,
    "!":                            /!/,
    "~":                            /~/,
    "-":                            /\-/,
    "+":                            /\+/,
    "*":                            /\*/,
    "/":                            /\//,
    "%":                            /%/,
    "<":                            /</,
    ">":                            />/,
    "^":                            /\^/,
    "|":                            /\|/,
    "?":                            /\?/,
    "whitespace":                   /[ \t\v\n\f]/,
    "unmatched":                    /./
};
module.exports.tokenRules = tokenRules;
